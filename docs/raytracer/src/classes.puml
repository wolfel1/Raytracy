@startuml raytracer_classes
abstract Hitable
Hitable : {abstract} +IsHit(ray: Ray, min: float, max: float, hit: Hit)

class Sphere
Sphere : -center: vec3
Sphere : -radius: float
Sphere : +Sphere()
Sphere : +Sphere(center: vec3, radius: float, material: Material)
Sphere : +~Sphere()

Hitable <|-- Sphere
Hitable --> Material

abstract Material
Material : {abstract} +Scatter(incoming_ray: Ray, hit: Hit, attenuation: vec4, scattered: Ray)

class LambertianDiffuse
LambertianDiffuse : -albedo: vec4
LambertianDiffuse : +LambertianDiffuse(albedo: vec4)

class Metal
Metal : -albedo: vec4
Metal : -fuzzy: float
Metal : +Metal(albedo: vec4, fuzzy: float)

class Dielectric
Dielectric : -index_of_refraction: float
Dielectric : +Dielectric(index_of_refraction: float)
Dielectric : -Reflectance(cosine: float, ratio: float): float

Material <|-- LambertianDiffuse
Material <|-- Metal
Material <|-- Dielectric

struct Hit
Hit : +point: vec3
Hit : +normal: vec3
Hit : +hit_value: float
Hit : +front_face: bool
Hit : +SetFaceNormal(ray: Ray, outward_normal: vec3)

Hit --> Material

class Camera
Camera : -origin: vec3
Camera : -lower_left_corner: vec3
Camera : -horizontal_axis: vec3
Camera : -vertical_axis: vec3
Camera : -u: vec3
Camera : -v: vec3
Camera : -w: vec3
Camera : +Camera(look_from: vec3, look_at: vec3, up: vec3, fov: float, aspect_ratio: float)
Camera : +ShootRay(s: float, t: float): Ray

class Image
Image : -width: int
Image : -height: int
Image : -samples_per_pixel: int
Image : -max_depth: int
Image : -image_raw_data: vec4*
Image : +Image(width: int, height: int, samples_per_pixel: int, depth: int)
Image : +SetData(data: vec4*)
Image : +WriteImage()

class Ray
Ray : -origin: vec3
Ray : -direction: vec3
Ray : +Ray(origin: vec3, direction: vec3)
Ray : +PointingAt(length: float)

class Scene
Scene : +Scene(object: Hitable)
Scene : +Clear()
Scene : +Add(object: Hitable)
Scene : +HitObjects(ray: Ray, min: float, max: float, hit: Hit): bool

Scene --> "0..*" Hitable

class Raytracer
Raytracer : accumulated_color_data: vec4*
Raytracer : +Raytracer()
Raytracer : +Submit(objects: Scene, camera: Camera, image: Image)
Raytracer : -RayTrace()
Raytracer : -ComputePixelColor(ray: Ray, objects: Scene, depth: int)

Raytracer --> Scene
Raytracer --> Camera
Raytracer --> Image
@enduml